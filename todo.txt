Remove the CodePointer attribute. Or move CodePointer to the same file.
Error messages for bad arguments.
var maybeInstruction = interpreter[name](cp) -> 
var e = new TypeError("TypeError: "+name+" is not an interpreter method");
if(!(interpreter[methodName] instanceof Function)) {
  throw e;
}
var mi = interpreter[name](cp);
return mi;
Move CodePointer method tests to specInterpreterCodePointer.js, except parse

token.toString() -> token.toString().replace(/^\/\^?/, "/^")
  
Make better error message for InterpreterMethodFactory.prototype
  .makeMethod(function(){return null;});
  current is Expected /^undefined/ to match '[object Object]'.
  No, this ocurres when a nonterminal fails before codePointer.parse has been
  called. Testable by writing a new interpreter method factory method that 
  fails, but I think this is a failure of Semantics! itself, not a bug in 
  the input to the interpreter. Maybe should be reported as an extention 
  failure?
Move the static methods of InterpreterMethodFactory into a closure
Write test case for debugging when the top symbol has a copied twin method.
Add ^ to match debugging message to emphazise that it is a head match.
Allow another this-binding than the interpreter itself.
Add exeptions to InterpreterMethodFactory.callInterpreterMethod
Move makeMethod from the prototype/this so that the factory methods can be 
  called as functions, e g apply
Make a method accept many strings, concatenate them.
The nonterminal padding behaves like group, but it returns the result of the 
  first named non regex method instead of an object. Optional index returns 
  the result of a later method instead.
Deferred methods should accept parameters, which will be supplied as 
  additional arguments to the interpretation.
baaa => bas in head recursion tests.
Remove repetition in error message of 
  i.a = atom(/a/);
  i.aa = or("a", "a");
  i.aa("b");
What is the error message of empty().call("a")?
Move group object results test to multiPropertyObject.
or(opt(group(/a/, /b/)), /ac/)))("ac")
Is makeMethod a mixin?
What is the error message if a nonterminal fails without having tried to parse 
  anything?
Todo: make instructions remember their ends so we dont need heads. Then 
  restoration of the codepointer can be made in one place, post instruction 
  maker, which will reduce risks for errors, just like failed parsings are 
  restored.
Opt, isPrimitive = defaultValue === null || 
  ["undefined", "boolean", "number", "string"]
  .indexOf(typeof defaultValue) > -1;
  return isPrimitive?defaultValue:defaultValue();
Star will return the delimiters if they are mehod names, not regexes.
Fix interaction between insignificant and caching.
  or(insignificant(/i/, group("a")), "a")("a") == "a";
Only parse last insignificant if it has been parsed before 
  insignificant(/i/, insignificant(/j/, "a"))("jaj") => "a"