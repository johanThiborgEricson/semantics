Shorten the names of the methods of the InterpreterMethodFactory.
Remove the CodePointer attribute. Or move CodePointer to the same file.
Error messages for bad arguments.
Implement separated lists.
The quantifiers should be called quantifiers, not non terminals
Nonterminal is one word, not two.
var maybeInstruction = interpreter[name](cp) -> 
var e = new TypeError("TypeError: "+name+" is not an interpreter method");
if(!(interpreter[methodName] instanceof Function)) {
  throw e;
}
var mi = interpreter[name](cp);
return mi;
Move CodePointer method tests to specInterpreterCodePointer.js, except parse
Distinguish between the name of the current method and the subinstructions.

token.toString() -> token.toString().replace(/^\/\^?/, "/^")
  
Make better error message for InterpreterMethodFactory.prototype
  .makeMethod(function(){return null;});
  current is Expected /^undefined/ to match '[object Object]'.
  No, this ocurres when a nonterminal fails before codePointer.parse has been
  called. Testable by writing a new interpreter method factory method that 
  fails, but I think this is a failure of Semantics! itself, not a bug in 
  the input to the interpreter. Maybe should be reported as an extention 
  failure?
Detect if recursive call is necessary by resetting and setting a boolean in 
  head.
Make disjunctions greedy. Not if called or.
disjunction => or|any|longest any suggests that some will be choosen. This 
  will not be the case if all fails. Longest is only if it is made greedy, but 
  or will make sense to programmers even if it isn't
nonTerminalQuestionMark => opt? Borrowed from JS-syntax subscripts
Move the static methods of InterpreterMethodFactory into a closure
Write test case for debugging when the top symbol has a copied twin method.
Add ^ to match debugging message to emphazise that it is a head match.
Make debugging report the captured groups of a match
Allow another this-binding than the interpreter itself.
Add exeptions to InterpreterMethodFactory.callInterpreterMethod
Put object result construction in group in its own method.
Replace teminal with atom in head recrusion tests